create table user_imdb(
    handle varchar(1000),
    email varchar(1000),
    password varchar(1000),
    photo varchar(2000),
    birthday date,
    constraint pk_user primary key (handle,email)
);

create table CELEB(
    celeb_id int primary key ,
    name varchar(100) not null,
    photo varchar(2000),
    birthday date,
    deathday date,
    biography varchar(2000),
    height float
);

create table MOVIE(
    movie_id int primary key ,
    name varchar(500),
    genre varchar(150),
    synopsis varchar(2000),
    release_date date,
    runtime int
);

create table tv_show(
    show_id int primary key ,
    name varchar(500),
    genre varchar(150),
    synopsis varchar(2000),
    release_date date
);

create table episode(
    show_id int,
    season_no int,
    episode_no int,
    episode_name varchar(1000),
    synopsis varchar(2000),
    release_date date,
    runtime int,
    constraint pk primary key (show_id,season_no,episode_no),
    constraint fk foreign key (show_id) references TV_SHOW
);

create table movie_actor(
    movie_id int,
    celeb_id int,
    constraint pk_m_a primary key (movie_id,celeb_id),
    constraint fk1_m_a foreign key (movie_id) references MOVIE(MOVIE_ID),
    constraint fk2_m_a foreign key (celeb_id) references CELEB(CELEB_ID)
);

create table movie_director(
    movie_id int,
    celeb_id int,
    constraint pk_m_d primary key (movie_id,celeb_id),
    constraint fk1_m_d foreign key (movie_id) references MOVIE(MOVIE_ID),
    constraint fk2_m_d foreign key (celeb_id) references CELEB(CELEB_ID)
);

create table movie_writer(
    movie_id int,
    celeb_id int,
    constraint pk_m_w primary key (movie_id,celeb_id),
    constraint fk1_m_w foreign key (movie_id) references MOVIE(MOVIE_ID),
    constraint fk2_m_w foreign key (celeb_id) references CELEB(CELEB_ID)
);

create table movie_producer(
    movie_id int,
    celeb_id int,
    constraint pk_m_p primary key (movie_id,celeb_id),
    constraint fk1_m_p foreign key (movie_id) references MOVIE(MOVIE_ID),
    constraint fk2_m_p foreign key (celeb_id) references CELEB(CELEB_ID)
);

create table movie_reviews(
    movie_id int,
    handle varchar(1000),
    email varchar(1000),
    rating float,
    review_text varchar(2000),
    constraint pk_m_r primary key (movie_id,handle,email),
    constraint fk1_m_r foreign key (movie_id) references MOVIE(MOVIE_ID),
    constraint fk2_m_r foreign key (handle,email) references USER_IMDB(HANDLE,EMAIL)
);

create table tv_reviews(
    show_id int,
    handle varchar(1000),
    email varchar(1000),
    rating float,
    review_text varchar(2000),
    constraint pk_t_r primary key (show_id,handle,email),
    constraint fk1_t_r foreign key (show_id) references TV_SHOW(SHOW_ID),
    constraint fk2_t_r foreign key (handle,email) references USER_IMDB(HANDLE,EMAIL)
);

create table episode_reviews(
    show_id int,
    season_no int,
    episode_no int,
    handle varchar(1000),
    email varchar(1000),
    rating float,
    review_text varchar(2000),
    constraint pk_e_r primary key (show_id,season_no,episode_no,handle,email),
    constraint fk1_e_r foreign key (show_id,season_no,episode_no) references EPISODE(SHOW_ID,SEASON_NO,EPISODE_NO),
    constraint fk2_e_r foreign key (handle,email) references USER_IMDB(HANDLE,EMAIL)
);

create table episode_actor(
    show_id int,
    season_no int,
    episode_no int,
    celeb_id int,
    constraint pk_e_a primary key (show_id,season_no,episode_no,celeb_id),
    constraint fk1_e_a foreign key (show_id,season_no,episode_no) references EPISODE(SHOW_ID,SEASON_NO,EPISODE_NO),
    constraint fk2_e_a foreign key (celeb_id) references CELEB(CELEB_ID)
);

create table episode_director(
    show_id int,
    season_no int,
    episode_no int,
    celeb_id int,
    constraint pk_e_d primary key (show_id,season_no,episode_no,celeb_id),
    constraint fk1_e_d foreign key (show_id,season_no,episode_no) references EPISODE(SHOW_ID,SEASON_NO,EPISODE_NO),
    constraint fk2_e_d foreign key (celeb_id) references CELEB(CELEB_ID)
);

create table episode_writer(
    show_id int,
    season_no int,
    episode_no int,
    celeb_id int,
    constraint pk_e_w primary key (show_id,season_no,episode_no,celeb_id),
    constraint fk1_e_w foreign key (show_id,season_no,episode_no) references EPISODE(SHOW_ID,SEASON_NO,EPISODE_NO),
    constraint fk2_e_w foreign key (celeb_id) references CELEB(CELEB_ID)
);

create table tv_actor(
    show_id int,
    celeb_id int,
    constraint pk_t_a primary key (show_id,celeb_id),
    constraint fk1_t_a foreign key (show_id) references TV_SHOW(SHOW_ID),
    constraint fk2_t_a foreign key (celeb_id) references CELEB(CELEB_ID)
);

create table tv_director(
    show_id int,
    celeb_id int,
    constraint pk_t_d primary key (show_id,celeb_id),
    constraint fk1_t_d foreign key (show_id) references TV_SHOW(SHOW_ID),
    constraint fk2_t_d foreign key (celeb_id) references CELEB(CELEB_ID)
);

create table tv_writer(
    show_id int,
    celeb_id int,
    constraint pk_t_w primary key (show_id,celeb_id),
    constraint fk1_t_w foreign key (show_id) references TV_SHOW(SHOW_ID),
    constraint fk2_t_w foreign key (celeb_id) references CELEB(CELEB_ID)
);

create table tv_producer(
    show_id int,
    celeb_id int,
    constraint pk_t_p primary key (show_id,celeb_id),
    constraint fk1_t_p foreign key (show_id) references TV_SHOW(SHOW_ID),
    constraint fk2_t_p foreign key (celeb_id) references CELEB(CELEB_ID)
);

create table movie_watchlist(
          movie_id int,
          handle varchar(1000),
          email varchar(1000),
          status varchar(100),
          constraint pk_m_wl primary key (movie_id,handle,email),
          constraint fk1_m_wl foreign key (movie_id) references MOVIE(MOVIE_ID),
          constraint fk2_m_wl foreign key (handle,email) references USER_IMDB(HANDLE,EMAIL)
);

create table tv_show_watchlist(
    show_id int,
    handle varchar(1000),
    email varchar(1000),
    status varchar(100),
    constraint pk_t_wl primary key (show_id,handle,email),
    constraint fk1_t_wl foreign key (show_id) references MOVIE(MOVIE_ID),
    constraint fk2_t_wl foreign key (handle,email) references USER_IMDB(HANDLE,EMAIL)
);